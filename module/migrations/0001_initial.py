# Generated by Django 2.2.5 on 2019-12-09 22:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import module.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id_card', models.CharField(max_length=15, primary_key=True, serialize=False, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Administrador'), ('creator', 'Creator'), ('user', 'User')], max_length=10)),
                ('birth', models.DateField(null=True)),
                ('first_name', models.CharField(max_length=35)),
                ('last_name', models.CharField(max_length=35)),
                ('email', models.CharField(max_length=60, unique=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', module.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Docker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('ip', models.CharField(max_length=15, null=True, unique=True)),
                ('languaje', models.CharField(choices=[('python', 'Python')], max_length=100)),
                ('proto_path', models.CharField(max_length=500, null=True)),
                ('base_path', models.CharField(max_length=500, null=True)),
                ('img_name', models.CharField(max_length=500, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='owner', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_file', models.CharField(max_length=500, null=True)),
                ('output_file', models.CharField(max_length=500, null=True)),
                ('response', models.CharField(max_length=1000, null=True)),
                ('docker', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiments', to='module.Docker')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GraphType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('bar', 'Bar graphic'), ('donut', 'Donut chart')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Graph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.CharField(max_length=100)),
                ('y', models.CharField(max_length=100)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graphs', to='module.Experiment')),
                ('kind', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='graphs', to='module.GraphType')),
            ],
        ),
        migrations.CreateModel(
            name='ElementType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('img', 'Image'), ('txt', 'Text'), ('video', 'Video'), ('graph', 'Graph')], max_length=30)),
                ('docker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='elements_type', to='module.Docker')),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='types', to='module.Element')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='dockers',
            field=models.ManyToManyField(related_name='users', to='module.Docker'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
